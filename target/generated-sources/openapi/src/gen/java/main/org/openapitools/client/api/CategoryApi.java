/*
 * API de Productos y Categorías
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import javax.validation.constraints.*;

import org.openapitools.client.model.CategoryRequestDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CategoryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CategoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CategoryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for categoriesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de categorías </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return categoriesGetCall(_callback);

    }

    /**
     * Obtener todas las categorías
     * 
     * @return List&lt;CategoryRequestDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de categorías </td><td>  -  </td></tr>
     </table>
     */
    public List<CategoryRequestDTO> categoriesGet() throws ApiException {
        ApiResponse<List<CategoryRequestDTO>> localVarResp = categoriesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Obtener todas las categorías
     * 
     * @return ApiResponse&lt;List&lt;CategoryRequestDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de categorías </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CategoryRequestDTO>> categoriesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = categoriesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<CategoryRequestDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener todas las categorías (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Lista de categorías </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesGetAsync(final ApiCallback<List<CategoryRequestDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<CategoryRequestDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesIdDelete
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Categoría eliminada </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Categoría no encontrada </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling categoriesIdDelete(Async)");
        }

        return categoriesIdDeleteCall(id, _callback);

    }

    /**
     * Eliminar una categoría por ID
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Categoría eliminada </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Categoría no encontrada </td><td>  -  </td></tr>
     </table>
     */
    public void categoriesIdDelete(String id) throws ApiException {
        categoriesIdDeleteWithHttpInfo(id);
    }

    /**
     * Eliminar una categoría por ID
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Categoría eliminada </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Categoría no encontrada </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> categoriesIdDeleteWithHttpInfo( @NotNull String id) throws ApiException {
        okhttp3.Call localVarCall = categoriesIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Eliminar una categoría por ID (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Categoría eliminada </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Categoría no encontrada </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesIdDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesIdGet
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Categoría encontrada </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Categoría no encontrada </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling categoriesIdGet(Async)");
        }

        return categoriesIdGetCall(id, _callback);

    }

    /**
     * Obtener una categoría por ID
     * 
     * @param id  (required)
     * @return CategoryRequestDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Categoría encontrada </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Categoría no encontrada </td><td>  -  </td></tr>
     </table>
     */
    public CategoryRequestDTO categoriesIdGet(String id) throws ApiException {
        ApiResponse<CategoryRequestDTO> localVarResp = categoriesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Obtener una categoría por ID
     * 
     * @param id  (required)
     * @return ApiResponse&lt;CategoryRequestDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Categoría encontrada </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Categoría no encontrada </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryRequestDTO> categoriesIdGetWithHttpInfo( @NotNull String id) throws ApiException {
        okhttp3.Call localVarCall = categoriesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CategoryRequestDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Obtener una categoría por ID (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Categoría encontrada </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Categoría no encontrada </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesIdGetAsync(String id, final ApiCallback<CategoryRequestDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CategoryRequestDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesIdPut
     * @param id  (required)
     * @param categoryRequestDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Categoría actualizada </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Categoría no encontrada </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesIdPutCall(String id, CategoryRequestDTO categoryRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = categoryRequestDTO;

        // create path and map variables
        String localVarPath = "/categories/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesIdPutValidateBeforeCall(String id, CategoryRequestDTO categoryRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling categoriesIdPut(Async)");
        }

        // verify the required parameter 'categoryRequestDTO' is set
        if (categoryRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'categoryRequestDTO' when calling categoriesIdPut(Async)");
        }

        return categoriesIdPutCall(id, categoryRequestDTO, _callback);

    }

    /**
     * Actualizar una categoría por ID
     * 
     * @param id  (required)
     * @param categoryRequestDTO  (required)
     * @return CategoryRequestDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Categoría actualizada </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Categoría no encontrada </td><td>  -  </td></tr>
     </table>
     */
    public CategoryRequestDTO categoriesIdPut(String id, CategoryRequestDTO categoryRequestDTO) throws ApiException {
        ApiResponse<CategoryRequestDTO> localVarResp = categoriesIdPutWithHttpInfo(id, categoryRequestDTO);
        return localVarResp.getData();
    }

    /**
     * Actualizar una categoría por ID
     * 
     * @param id  (required)
     * @param categoryRequestDTO  (required)
     * @return ApiResponse&lt;CategoryRequestDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Categoría actualizada </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Categoría no encontrada </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryRequestDTO> categoriesIdPutWithHttpInfo( @NotNull String id,  @NotNull CategoryRequestDTO categoryRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = categoriesIdPutValidateBeforeCall(id, categoryRequestDTO, null);
        Type localVarReturnType = new TypeToken<CategoryRequestDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Actualizar una categoría por ID (asynchronously)
     * 
     * @param id  (required)
     * @param categoryRequestDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Categoría actualizada </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Categoría no encontrada </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesIdPutAsync(String id, CategoryRequestDTO categoryRequestDTO, final ApiCallback<CategoryRequestDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesIdPutValidateBeforeCall(id, categoryRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<CategoryRequestDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categoriesPost
     * @param categoryRequestDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Categoría creada </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesPostCall(CategoryRequestDTO categoryRequestDTO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = categoryRequestDTO;

        // create path and map variables
        String localVarPath = "/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoriesPostValidateBeforeCall(CategoryRequestDTO categoryRequestDTO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryRequestDTO' is set
        if (categoryRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'categoryRequestDTO' when calling categoriesPost(Async)");
        }

        return categoriesPostCall(categoryRequestDTO, _callback);

    }

    /**
     * Crear una nueva categoría
     * 
     * @param categoryRequestDTO  (required)
     * @return CategoryRequestDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Categoría creada </td><td>  -  </td></tr>
     </table>
     */
    public CategoryRequestDTO categoriesPost(CategoryRequestDTO categoryRequestDTO) throws ApiException {
        ApiResponse<CategoryRequestDTO> localVarResp = categoriesPostWithHttpInfo(categoryRequestDTO);
        return localVarResp.getData();
    }

    /**
     * Crear una nueva categoría
     * 
     * @param categoryRequestDTO  (required)
     * @return ApiResponse&lt;CategoryRequestDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Categoría creada </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryRequestDTO> categoriesPostWithHttpInfo( @NotNull CategoryRequestDTO categoryRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = categoriesPostValidateBeforeCall(categoryRequestDTO, null);
        Type localVarReturnType = new TypeToken<CategoryRequestDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Crear una nueva categoría (asynchronously)
     * 
     * @param categoryRequestDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Categoría creada </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoriesPostAsync(CategoryRequestDTO categoryRequestDTO, final ApiCallback<CategoryRequestDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoriesPostValidateBeforeCall(categoryRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<CategoryRequestDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
